Write some C functions, without any explaination.

Use the FLINT library for the polynomial operations.

Use types fmpz_mpoly_t for the polynomials,
fmpz_mpoly_vec_t for a vector of polynomials, and
fmpz_mpoly_ctx_t for a ring context.

Function fmpz_mpoly_leadterm
constructs the leading term of a polynomial by making a copy of the polynomial,
then truncating the copy to length 1.

Output the code for fmpz_mpoly_leadterm.

Function construct_s_pairs takes these arguments: an immutable input vector of polynomial generators,
an output vector of s-pairs, and an immutable ring context.

Function construct_s_pairs loops over every pair of polynomial generators, and for each one,
  constructs their leading terms,
  constructs the greatest common divisor (GCD) of their leading terms,
  multiplies a copy of each generator by the leading term of the other generator,
  divides that copy by the GCD,
  subtracts those two copies from each other,
  and appends that result to the output vector,
  then logs that it constructed an s-pair for those two polynomials.

Output the code for construct_s_pairs.

Function reduce_by_set takes these arguments: an input/output polynomial,
an immutable input vector of polynomials and an immutable ring context.

Function reduce_by_set loops over its input vector of polynomials,
checking the leading term of each polynomial in the vector to
see if it divides the leading term of the input/output polynomial.
If so, multiply that polynomial from the vector by the GCD
of its leading term and the leading term of the input/output polynomial,
then subtracting that result from the input/output polynomial.
Keep doing this until no polynomial in the vector matches the condition above.

Output the code for reduce_by_set.
