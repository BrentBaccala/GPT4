Write some C functions.

Start the output like this:

#include <stdio.h>
#include <stdlib.h>
#include "flint/flint.h"
#include "flint/fmpz_mpoly.h"
#include "flint/fmpz_mpoly_factor.h"
#include "calcium/utils_flint.h"

Use the FLINT library for the polynomial operations.

Use the Calcium library for fmpz_mpoly_vec.

When asked to log information, print to standard error.

Use types fmpz_mpoly_t for the polynomials and
fmpz_mpoly_ctx_t for a ring context.

If asked to log a polynomial, use fmpz_mpoly_get_str_pretty to convert it to a string, then print to standard error.

Use fmpz_mpoly_vec_entry to read polynomials from a vector,
and you don't deference it when you assign it to an fmpz_mpoly_t,
but you need to call fmpz_mpoly_set to do the assignment.

== Polynomial Vectors ==

Use type fmpz_mpoly_vec_t for a vector of polynomials.

There is no way to assign directly to the polynomials in a polynomial vector.

To create a new polynomial vector with known polynomials, you must initialize the vector with fmpz_mpoly_vec_init,
and then append the known polynomials using fmpz_mpoly_vec_append.

If you want to copy a polynomial from a vector to an fmpz_mpoly_t, you must do something like this:
    fmpz_mpoly_t poly;
    fmpz_mpoly_init(poly, ctx);
    fmpz_mpoly_set(poly, fmpz_mpoly_vec_entry(vec, i), ctx);

When you call fmpz_mpoly_vec_init, you should always use zero for the second argument.

These are declared in the include files:
   fmpz_mpoly_vec_init(fmpz_mpoly_vec_t vec, slong len, const fmpz_mpoly_ctx_t ctx)
   void fmpz_mpoly_ctx_init(fmpz_mpoly_ctx_t ctx, slong nvars, const ordering_t ord)

When you call fmpz_mpoly_set_str_pretty, its third argument is an array of strings.
For fmpz_mpoly_get_str_pretty, the second argument is an array of strings.

Function fmpz_mpoly_leadterm
constructs the leading term of a polynomial by making a copy of the polynomial,
then truncating the copy to length 1.

An s-pair is a polynomial.

Function construct_s_pair takes these arguments: two immutable input polynomials,
an output s-pair, and an immutable ring context.

Function construct_s_pair
  logs that it is beginning construction of the s-pair,
  constructs the leading terms of the input polynomials,
  constructs the greatest common divisor (GCD) of their leading terms,
  multiplies a copy of each input polynomial by the leading term of the other input polynomial,
  divides that copy by the GCD,
  subtracts those two copies from each other to get the result,
  logs that it constructed an s-pair for those two polynomials,
  and returns the result.

Function reduce_by_vector takes these arguments: an input/output polynomial,
an immutable input vector of polynomials and an immutable ring context.

Function reduce_by_vector loops over its input vector of polynomials,
checking the leading term of each polynomial in the vector to
see if it divides the leading term of the input/output polynomial.
If so, multiply that polynomial from the vector by the GCD
of its leading term and the leading term of the input/output polynomial,
then subtracting that result from the input/output polynomial.
Keep doing this until no polynomial in the vector matches the condition above.

Function buchberger_naive takes these arguments:
   - an mutable output vector of polynomials
   - an immutable vector of generators
   - an immutable ring context

Function buchberger_naive maintains two local vectors of polynomials,
called the basis and the s-pairs.  Start by copying the vector
of generators to the basis.  For each pair of generators,
construct their s-pair and insert it into the s-pairs if it
is unique.  Then work through the vector of s-pairs from
beginning to end, reducing each one by the basis.
If the result is not zero, then append the result to
the basis, and loop over all of the other basis polynomials,
constructing the s-pair of it and the new basis polynomial,
and appending it to the s-pairs if it is unique.  Make sure
to process all of the s-pairs, even the ones added during
processing.

Function buchberger_naive puts the basis in the output vector
once the loop has terminated, and returns void.

A test case is a vector of polynomials

Test case 1 is (2x+3y+4z-5, 3x+4y+5z-2)

Function test_case_1 constructs a ring context for a polynomial ring
over the rational numbers with three variables (x,y,z), and
degrevlex order, then calls buchberger_naive with test case 1
and the ring context, and prints the returned basis.

Function main just calls test_case_1.

Output the code for all of these functions, without any explaination.
