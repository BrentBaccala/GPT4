Write some C functions, without any explaination.

Use the FLINT library for the polynomial operations.

Use the Calcium library for fmpz_mpoly_vec in utils_flint.h.

Use types fmpz_mpoly_t for the polynomials,
fmpz_mpoly_vec_t for a vector of polynomials, and
fmpz_mpoly_ctx_t for a ring context.

Function fmpz_mpoly_leadterm
constructs the leading term of a polynomial by making a copy of the polynomial,
then truncating the copy to length 1.

Output the code for fmpz_mpoly_leadterm.

An s-pair is a polynomial.

Function construct_s_pair takes these arguments: two immutable input polynomials,
an output s-pair, and an immutable ring context.

Function construct_s_pair
  constructs the leading terms of the input polynomials,
  constructs the greatest common divisor (GCD) of their leading terms,
  multiplies a copy of each input polynomial by the leading term of the other input polynomial,
  divides that copy by the GCD,
  subtracts those two copies from each other to get the result,
  logs that it constructed an s-pair for those two polynomials,
  and returns the result.

Output the code for construct_s_pair.

Function reduce_by_vector takes these arguments: an input/output polynomial,
an immutable input vector of polynomials and an immutable ring context.

Function reduce_by_vector loops over its input vector of polynomials,
checking the leading term of each polynomial in the vector to
see if it divides the leading term of the input/output polynomial.
If so, multiply that polynomial from the vector by the GCD
of its leading term and the leading term of the input/output polynomial,
then subtracting that result from the input/output polynomial.
Keep doing this until no polynomial in the vector matches the condition above.

Output the code for reduce_by_vector.

Function buchberger_naive takes these arguments:
   - an immutable vector of generators
   - an immutable ring context

Function buchberger_naive maintains two local vectors of polynomials,
called the basis and the s-pairs.  Start by copying the vector
of generators to the basis.  For each pair of generators,
construct their s-pair and insert it into the s-pairs if it
is unique.  Then work through the vector of s-pairs from
beginning to end, reducing each one by the basis.
If the result is not zero, then append the result to
the basis, and loop over all of the other basis polynomials,
constructing the s-pair of it and the new basis polynomial,
and appending it to the s-pairs if it is unique.  Make sure
to process all of the s-pairs, even the ones added during
processing.

Output the code for buchberger_naive.
