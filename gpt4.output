#include <flint/fmpz_mpoly.h>
#include <flint/fmpz_mpoly_vec.h>

void construct_s_pairs(const fmpz_mpoly_vec_t generators, fmpz_mpoly_vec_t s_pairs, const fmpz_mpoly_ctx_t ctx)
{
    fmpz_mpoly_t gcd, temp1, temp2;
    slong i, j;

    fmpz_mpoly_init(gcd, ctx);
    fmpz_mpoly_init(temp1, ctx);
    fmpz_mpoly_init(temp2, ctx);

    for (i = 0; i < generators->length; i++)
    {
        for (j = i + 1; j < generators->length; j++)
        {
            fmpz_mpoly_gcd(gcd, fmpz_mpoly_vec_entry(generators, i), fmpz_mpoly_vec_entry(generators, j), ctx);
            fmpz_mpoly_mul(temp1, fmpz_mpoly_vec_entry(generators, i), fmpz_mpoly_vec_entry(generators, j), ctx);
            fmpz_mpoly_mul(temp2, fmpz_mpoly_vec_entry(generators, j), fmpz_mpoly_vec_entry(generators, i), ctx);
            fmpz_mpoly_div(temp1, temp1, gcd, ctx);
            fmpz_mpoly_div(temp2, temp2, gcd, ctx);
            fmpz_mpoly_sub(temp1, temp1, temp2, ctx);
            fmpz_mpoly_vec_append(s_pairs, temp1, ctx);

            flint_printf("Constructed s-pair for polynomials %wd and %wd\n", i, j);
        }
    }

    fmpz_mpoly_clear(gcd, ctx);
    fmpz_mpoly_clear(temp1, ctx);
    fmpz_mpoly_clear(temp2, ctx);
}

void reduce_by_set(fmpz_mpoly_t f, const fmpz_mpoly_vec_t reduction_set, const fmpz_mpoly_ctx_t ctx)
{
    fmpz_mpoly_t gcd, temp;
    slong i;

    fmpz_mpoly_init(gcd, ctx);
    fmpz_mpoly_init(temp, ctx);

    int changed = 1;
    while (changed)
    {
        changed = 0;

        for (i = 0; i < reduction_set->length; i++)
        {
            fmpz_mpoly_t curr_poly = fmpz_mpoly_vec_entry(reduction_set, i);

            if (fmpz_mpoly_divides(gcd, f, curr_poly, ctx))
            {
                fmpz_mpoly_mul(temp, curr_poly, gcd, ctx);
                fmpz_mpoly_sub(f, f, temp, ctx);
                changed = 1;
            }
        }
    }

    fmpz_mpoly_clear(gcd, ctx);
    fmpz_mpoly_clear(temp, ctx);
}
