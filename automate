
Write a Python 3 script, and output it without any commentary.

Be sure to include a shebang line at the beginning.

The script should use Selenium.

Use Firefox as the WebDriver.

The script must be given one of the '-q' or '-f' options.  A '-q' can be specified, followed
by a user query, or a '-f' can be specified, followed by a file name.  If neither
is specified, print a usage message and exit.

The script must be given the '-n' option, which is followed by the name of the chatbot.
If it's not there, print a usage message and exit.

In addition, '-o' can be specified, followed by an output file name.  '-o' is completely optional.

In addition, '--headed' can be specified.  If '--headed' is present, operate Selenium headed,
otherwise operate headless.

If '-f' and a filename is specified, open the file and read the user query from there.
Otherwise, the argument to '-q' is the user query.

Start by connecting to https://poe.com/, click on the "Continue" button in the "Sign in with Google" popup,

Use EC.element_to_be_clickable whenever you want to find an element id, or CSS, or XPATH in the DOM.

You'll have to import By from selenium.webdriver.common.by, but By.TITLE does not exist.
Never attempt to use By.TITLE

The "Continue" button will appear in the DOM as a button with id "continue", and will be in an iframe
with title "Sign in with Google Dialog".
Use EC.frame_to_be_available_and_switch_to_it to find the iframe.

Wait for a new window to appear titled "Sign in - Google Accounts".

Do it like this:

WebDriverWait(driver, 10).until(EC.number_of_windows_to_be(2))
signin_window = [window for window in driver.window_handles if window != driver.current_window_handle][0]
driver.switch_to.window(signin_window)

In that window's DOM there will be an input element with type attribute "email".
Use EC.element_to_be_clickable to find it.

Enter my email address "cosine@freesoft.org" into that "Sign In" window, and click "Next".

Prompt the user on the script's stdin/stdout for a password, and wait for it to be entered.
Make sure not to echo the password while it's being typed.

There will be an input box on the web page with type "password" and name "Passwd".  Enter
the password in this box and click "Next".

The sign in window should disappear and only the original window should remain.  If this doesn't happen,
print "Bad password" on stdout and exit the script.

Otherwise, switch the browsing context back to the original window.

Wait for the name of the chatbot to appear in a HTML P element and click on it.
Don't obtain the name of the chatbot from the web page.  Use the string specified above.

Do it like this:

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//p[contains(text(), "chatbot")]'))).click()

where "chatbot" is the name of the chatbot.

The entry box is the textarea with placeholder text that says "Talk to", followed by the name of the chatbot, then "on Poe".
Use EC.presence_of_element_located to find the entry box.

The entry box's parent is a div, and that div's parent is another div, the chat message input container.
The chat message input container has a child element that is a "button".  This is the send button.

The chat message input container has a single sibling that is a button.  This is the clear context button.

Use this xpath to find the send button:
'//textarea[@placeholder="Talk to ChatBot on Poe"]/parent::div/parent::div/button',
but replace the string "ChatBot" with the name of the chatbot.

Use this xpath to find the clear context button:
'//textarea[@placeholder="Talk to ChatBot on Poe"]/parent::div/parent::div/parent::div/button',
but replace the string "ChatBot" with the name of the chatbot.

Use driver.find_element for this step, there is no driver.find_element_by_xpath.

Push the clear context button.

Enter the user query in the entry box and push the send button.

Wait until the send button's computed style "cursor" is "not-allowed".  Do it like this:

wait.until(lambda driver: driver.execute_script('return getComputedStyle(arguments[0]).cursor;', send_button) == 'not-allowed')

Then wait until the send button's computed style "cursor" is no longer "not-allowed".  Do it like this,
and use a five minute timeout on this step:

wait.until(lambda driver: driver.execute_script('return getComputedStyle(arguments[0]).cursor;', send_button) != 'not-allowed')

Set the timeout to five minutes on this step by creating a new WebDriverWait and using it instead of "wait".

The copy buttons are HTML buttons that contain an svg element and the text "Copy".

Use driver.find_elements to find the copy buttons.
Use '//button[contains(., "Copy")]' for the XPATH to match the copy button.
Find the last copy button in the DOM.  Do it like this:

    copy_buttons = driver.find_elements(By.XPATH, '//button[contains(., "Copy")]')
    last_copy_button = copy_buttons[-1]

Call last_copy_button.scrollIntoView(), then wait for the last copy button to be clickable, then click it.
Pass "last_copy_button" directly to EC.element_to_be_clickable, without using By.

Some text will appear in the clipboard.

Get the text in the clipboard and either print it to the output file,
if an output file name was specified, or print it to stdout.

Use pyperclip to get the text.
