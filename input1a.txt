include(common)

Never assign the result of fmpz_mpoly_vec_entry to a variable!  Never!

flint_printf does not take an initial FILE * argument.

Function fmpz_mpoly_get_term returns void, and
   its first argument is the output polynomial, which has already been initialized,
   its second argument is the input polynomial,
   its third argument the term number,
   and its fourth argument is the ring context.

It constructs the selected term in the input polynomial.

Function reduce_by_matching_term returns void, and
   its first argument is an input/output polynomial to be reduced,
   its second argument is a matching term in that polynomial,
   its third argument is the polynomial to reduce with,
   and its fourth argument is the ring context.

Function fmpz_mpoly_is_divisible returns a boolean (true if the division is exact, zero otherwise), and
   its first argument is the dividend,
   its second argument is the divisor,
   and its third argument is the ring context.

Function reduce_by_vector first logs its input/output polynomial,
then constructs the leading term of the input/output polynomial,
then loops over its input vector of polynomials, and for each polynomial in the vector,
constructs the leading term of the polynomial in the vector,
and does one of two things, depending on the lead reduction flag.

If lead reduction is true, the function
checks the leading term of the polynomial in the vector to
see if it divides the leading term of the input/output polynomial.
If so, this is the only matching term, and we call reduce_by_matching_term on it.

If lead reduction is false, the function
loops over all of the terms in the input/output polynomial
and checks each one to see if the leading term of the polynomial
in the vector divides that term.  These are the matching terms; call reduce_by_matching_term for each one.

If we're doing lead reduction, go back to the start of the function after a call to reduce_by_matching_term,
recompute the leading term of the input/output polynomial and check it again
against all of the polynomials in the vector.  If we're not doing lead reduction, then it's enough to
do the multiply-by-GCD-and-subtract step once for each matching term in the input/output polynomial.
In either case, break out of this loop if the result ever becomes zero.

You can never assign the result of fmpz_mpoly_vec_entry to a fmpz_mpoly_t.

Log the result of the reduction before returning.

When calling fmpz_mpoly_get_str_pretty, the second argument is an immutable array of three strings "x", "y", and "z".

Make sure that reduce_by_vector prints those logging messages when it starts and before it returns.

Output the header, any required function declarations, the code for reduce_by_vector, and nothing else, without any explaination.
