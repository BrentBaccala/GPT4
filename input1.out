#include <stdio.h>
#include <stdlib.h>
#include "flint/flint.h"
#include "flint/fmpz_mpoly.h"
#include "flint/fmpz_mpoly_factor.h"
#include "calcium/utils_flint.h"

void fmpz_mpoly_leadterm(fmpz_mpoly_t res, const fmpz_mpoly_t poly, const fmpz_mpoly_ctx_t ctx) {
    fmpz_mpoly_set(res, poly, ctx);
    fmpz_mpoly_make_monic(res, res, ctx);
    fmpz_mpoly_truncate(res, 1, ctx);
}

void construct_s_pair(fmpz_mpoly_t s_pair, const fmpz_mpoly_t poly1, const fmpz_mpoly_t poly2, const fmpz_mpoly_ctx_t ctx) {
    fmpz_mpoly_t lcm, gcd;
    
    fmpz_mpoly_init(lcm, ctx);
    fmpz_mpoly_init(gcd, ctx);
    
    fmpz_mpoly_gcd(gcd, poly1, poly2, ctx);
    fmpz_mpoly_lcm(lcm, poly1, poly2, ctx);
    
    fmpz_mpoly_mul(s_pair, poly1, poly2, ctx);
    fmpz_mpoly_divexact(s_pair, s_pair, gcd, ctx);
    
    fmpz_mpoly_clear(lcm, ctx);
    fmpz_mpoly_clear(gcd, ctx);
}

void reduce_by_vector(fmpz_mpoly_t poly, const fmpz_mpoly_vec_t vec, const fmpz_mpoly_ctx_t ctx) {
    int changed;
    fmpz_mpoly_t leadterm, gcd, tmp;
    
    fmpz_mpoly_init(leadterm, ctx);
    fmpz_mpoly_init(gcd, ctx);
    fmpz_mpoly_init(tmp, ctx);
    
    do {
        changed = 0;
        for (slong i = 0; i < vec->length; i++) {
            fmpz_mpoly_t vec_poly;
            fmpz_mpoly_init(vec_poly, ctx);
            fmpz_mpoly_set(vec_poly, fmpz_mpoly_vec_entry(vec, i), ctx);
            
            fmpz_mpoly_leadterm(leadterm, vec_poly, ctx);
            
            if (fmpz_mpoly_divides(gcd, poly, leadterm, ctx)) {
                fprintf(stderr, "Reducing polynomial: %s\n", fmpz_mpoly_get_str_pretty(poly, NULL, ctx));
                
                fmpz_mpoly_mul(tmp, vec_poly, gcd, ctx);
                fmpz_mpoly_sub(poly, poly, tmp, ctx);
                
                changed = 1;
            }
            
            fmpz_mpoly_clear(vec_poly, ctx);
        }
    } while (changed && !fmpz_mpoly_is_zero(poly, ctx));
    
    fmpz_mpoly_clear(leadterm, ctx);
    fmpz_mpoly_clear(gcd, ctx);
    fmpz_mpoly_clear(tmp, ctx);
}
