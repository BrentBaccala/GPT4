#include <stdio.h>
#include <stdlib.h>
#include "flint/flint.h"
#include "flint/fmpz_mpoly.h"
#include "flint/fmpz_mpoly_factor.h"
#include "calcium/utils_flint.h"

void reduce_by_vector(fmpz_mpoly_t poly, const fmpz_mpoly_vec_t vec, const fmpz_mpoly_ctx_t ctx) {
    int changed;
    fmpz_mpoly_t leadterm, gcd, tmp_poly;

    fmpz_mpoly_init(leadterm, ctx);
    fmpz_mpoly_init(gcd, ctx);
    fmpz_mpoly_init(tmp_poly, ctx);

    do {
        changed = 0;
        for (slong i = 0; i < vec->length; i++) {
            fmpz_mpoly_t vec_poly;
            fmpz_mpoly_init(vec_poly, ctx);
            fmpz_mpoly_set(vec_poly, fmpz_mpoly_vec_entry(vec, i), ctx);

            fmpz_mpoly_leadterm(leadterm, vec_poly, ctx);

            if (fmpz_mpoly_divides(gcd, poly, leadterm, ctx)) {
                fmpz_mpoly_mul(tmp_poly, vec_poly, gcd, ctx);
                fmpz_mpoly_sub(poly, poly, tmp_poly, ctx);
                fprintf(stderr, "Reducing by polynomial: %s\n", fmpz_mpoly_get_str_pretty(poly, NULL, ctx));

                changed = 1;
                fmpz_mpoly_clear(vec_poly, ctx);
                break;
            }

            fmpz_mpoly_clear(vec_poly, ctx);
        }
    } while (changed);

    fmpz_mpoly_clear(leadterm, ctx);
    fmpz_mpoly_clear(gcd, ctx);
    fmpz_mpoly_clear(tmp_poly, ctx);
}
